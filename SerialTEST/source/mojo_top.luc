module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,       // AVR RX buffer full
    input enc1a,
    input enc1b,
    input enc2a,
    input enc2b,
    output speed,
    output direction,
    output direction2
  ) {
 
  sig rst;                  // reset signal
 
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
 
    .rst(rst){
      // the avr_interface module is used to talk to the AVR for access to the USB port and analog pins
      avr_interface avr;
      reg_interface reg;
      
      quadencoder encoder1;
      quadencoder encoder2;
      
      pwm motorSpeed;
 
      dff encoder1value [16];
      dff encoder2value [16];
      dff pwmValue [8];
      dff direction1Value;
      dff direction2Value;
    }
  }
 
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
 
    // connect inputs of avr
    avr.cclk = cclk;
    avr.spi_ss = spi_ss;
    avr.spi_mosi = spi_mosi;
    avr.spi_sck = spi_sck;
    avr.rx = avr_tx;
    avr.channel = hf;           // ADC is unused so disable
    avr.tx_block = avr_rx_busy; // block TX when AVR is busy
 
    // connect outputs of avr
    spi_miso = avr.spi_miso;
    spi_channel = avr.spi_channel;
    avr_rx = avr.tx;
 
    // connect reg interface to avr interface
    reg.rx_data = avr.rx_data;
    reg.new_rx_data = avr.new_rx_data;
    avr.tx_data = reg.tx_data;
    avr.new_tx_data = reg.new_tx_data;
    reg.tx_busy = avr.tx_busy;
 
    reg.regIn.drdy = 0;                   // default to not ready
    reg.regIn.data = 32bx;                // don't care
    motorSpeed.update = 1;
 
    if (reg.regOut.new_cmd) {             // new command
      if (reg.regOut.write){              // if write
        if (reg.regOut.address == 2){
          pwmValue.d = reg.regOut.data[7:0];
          direction1Value.d = reg.regOut.data[8];
        }
      }else{                               //if read
        if (reg.regOut.address == 0) {    // if address is 0
          reg.regIn.data = encoder1value.q;        // read the motor encoder
          reg.regIn.drdy = 1;             // signal data ready
        }
        else if (reg.regOut.address == 1) {    // if address is 0
          reg.regIn.data = encoder2value.q;        // read the leg encoder
          reg.regIn.drdy = 1;    
        }
      }
    }
    
    if (direction1Value.q == 1){
      direction2Value.d = 0;
    }
    else{
      direction2Value.d = 1;
    }
    
    direction = direction1Value.q;
    direction2 = direction2Value.q;
    
    encoder1.a = ~enc1a;
    encoder1.b = ~enc1b;
    encoder1value.d = encoder1.count;
    encoder2.a = ~enc2a;
    encoder2.b = ~enc2b;
    encoder2value.d = encoder2.count;
    
    motorSpeed.value = pwmValue.q;
    speed = motorSpeed.pulse;
    
    led = c{2h00, ~enc1a, ~enc1b, ~enc2a, ~enc2b, motorSpeed.pulse, direction1Value.q, direction2Value.q};
  }
}