/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    input enc1a,
    input enc1b,
    input enc2a,
    input enc2b,
    output reg speed,
    output reg direction,
    output reg direction2
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_avr_spi_miso;
  wire [4-1:0] M_avr_spi_channel;
  wire [1-1:0] M_avr_tx;
  wire [1-1:0] M_avr_new_sample;
  wire [10-1:0] M_avr_sample;
  wire [4-1:0] M_avr_sample_channel;
  wire [1-1:0] M_avr_tx_busy;
  wire [8-1:0] M_avr_rx_data;
  wire [1-1:0] M_avr_new_rx_data;
  reg [1-1:0] M_avr_cclk;
  reg [1-1:0] M_avr_spi_mosi;
  reg [1-1:0] M_avr_spi_sck;
  reg [1-1:0] M_avr_spi_ss;
  reg [1-1:0] M_avr_rx;
  reg [4-1:0] M_avr_channel;
  reg [8-1:0] M_avr_tx_data;
  reg [1-1:0] M_avr_new_tx_data;
  reg [1-1:0] M_avr_tx_block;
  avr_interface_2 avr (
    .clk(clk),
    .rst(rst),
    .cclk(M_avr_cclk),
    .spi_mosi(M_avr_spi_mosi),
    .spi_sck(M_avr_spi_sck),
    .spi_ss(M_avr_spi_ss),
    .rx(M_avr_rx),
    .channel(M_avr_channel),
    .tx_data(M_avr_tx_data),
    .new_tx_data(M_avr_new_tx_data),
    .tx_block(M_avr_tx_block),
    .spi_miso(M_avr_spi_miso),
    .spi_channel(M_avr_spi_channel),
    .tx(M_avr_tx),
    .new_sample(M_avr_new_sample),
    .sample(M_avr_sample),
    .sample_channel(M_avr_sample_channel),
    .tx_busy(M_avr_tx_busy),
    .rx_data(M_avr_rx_data),
    .new_rx_data(M_avr_new_rx_data)
  );
  wire [8-1:0] M_reg_tx_data;
  wire [1-1:0] M_reg_new_tx_data;
  wire [66-1:0] M_reg_regOut;
  reg [8-1:0] M_reg_rx_data;
  reg [1-1:0] M_reg_new_rx_data;
  reg [1-1:0] M_reg_tx_busy;
  reg [33-1:0] M_reg_regIn;
  reg_interface_3 L_reg (
    .clk(clk),
    .rst(rst),
    .rx_data(M_reg_rx_data),
    .new_rx_data(M_reg_new_rx_data),
    .tx_busy(M_reg_tx_busy),
    .regIn(M_reg_regIn),
    .tx_data(M_reg_tx_data),
    .new_tx_data(M_reg_new_tx_data),
    .regOut(M_reg_regOut)
  );
  wire [16-1:0] M_encoder1_count;
  reg [1-1:0] M_encoder1_a;
  reg [1-1:0] M_encoder1_b;
  quadencoder_4 encoder1 (
    .clk(clk),
    .rst(rst),
    .a(M_encoder1_a),
    .b(M_encoder1_b),
    .count(M_encoder1_count)
  );
  wire [16-1:0] M_encoder2_count;
  reg [1-1:0] M_encoder2_a;
  reg [1-1:0] M_encoder2_b;
  quadencoder_4 encoder2 (
    .clk(clk),
    .rst(rst),
    .a(M_encoder2_a),
    .b(M_encoder2_b),
    .count(M_encoder2_count)
  );
  wire [1-1:0] M_motorSpeed_pulse;
  reg [8-1:0] M_motorSpeed_value;
  reg [1-1:0] M_motorSpeed_update;
  pwm_6 motorSpeed (
    .clk(clk),
    .rst(rst),
    .value(M_motorSpeed_value),
    .update(M_motorSpeed_update),
    .pulse(M_motorSpeed_pulse)
  );
  reg [15:0] M_encoder1value_d, M_encoder1value_q = 1'h0;
  reg [15:0] M_encoder2value_d, M_encoder2value_q = 1'h0;
  reg [7:0] M_pwmValue_d, M_pwmValue_q = 1'h0;
  reg M_direction1Value_d, M_direction1Value_q = 1'h0;
  reg M_direction2Value_d, M_direction2Value_q = 1'h0;
  
  always @* begin
    M_encoder2value_d = M_encoder2value_q;
    M_direction2Value_d = M_direction2Value_q;
    M_encoder1value_d = M_encoder1value_q;
    M_direction1Value_d = M_direction1Value_q;
    M_pwmValue_d = M_pwmValue_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    M_avr_cclk = cclk;
    M_avr_spi_ss = spi_ss;
    M_avr_spi_mosi = spi_mosi;
    M_avr_spi_sck = spi_sck;
    M_avr_rx = avr_tx;
    M_avr_channel = 4'hf;
    M_avr_tx_block = avr_rx_busy;
    spi_miso = M_avr_spi_miso;
    spi_channel = M_avr_spi_channel;
    avr_rx = M_avr_tx;
    M_reg_rx_data = M_avr_rx_data;
    M_reg_new_rx_data = M_avr_new_rx_data;
    M_avr_tx_data = M_reg_tx_data;
    M_avr_new_tx_data = M_reg_new_tx_data;
    M_reg_tx_busy = M_avr_tx_busy;
    M_reg_regIn[32+0-:1] = 1'h0;
    M_reg_regIn[0+31-:32] = 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx;
    M_motorSpeed_update = 1'h1;
    if (M_reg_regOut[0+0-:1]) begin
      if (M_reg_regOut[1+0-:1]) begin
        if (M_reg_regOut[2+31-:32] == 2'h2) begin
          M_pwmValue_d = M_reg_regOut[34+0+7-:8];
          M_direction1Value_d = M_reg_regOut[34+8+0-:1];
        end
      end else begin
        if (M_reg_regOut[2+31-:32] == 1'h0) begin
          M_reg_regIn[0+31-:32] = M_encoder1value_q;
          M_reg_regIn[32+0-:1] = 1'h1;
        end else begin
          if (M_reg_regOut[2+31-:32] == 1'h1) begin
            M_reg_regIn[0+31-:32] = M_encoder2value_q;
            M_reg_regIn[32+0-:1] = 1'h1;
          end
        end
      end
    end
    if (M_direction1Value_q == 1'h1) begin
      M_direction2Value_d = 1'h0;
    end else begin
      M_direction2Value_d = 1'h1;
    end
    direction = M_direction1Value_q;
    direction2 = M_direction2Value_q;
    M_encoder1_a = ~enc1a;
    M_encoder1_b = ~enc1b;
    M_encoder1value_d = M_encoder1_count;
    M_encoder2_a = ~enc2a;
    M_encoder2_b = ~enc2b;
    M_encoder2value_d = M_encoder2_count;
    M_motorSpeed_value = M_pwmValue_q;
    speed = M_motorSpeed_pulse;
    led = {2'h0, ~enc1a, ~enc1b, ~enc2a, ~enc2b, M_motorSpeed_pulse, M_direction1Value_q, M_direction2Value_q};
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_encoder1value_q <= 1'h0;
      M_encoder2value_q <= 1'h0;
      M_pwmValue_q <= 1'h0;
      M_direction1Value_q <= 1'h0;
      M_direction2Value_q <= 1'h0;
    end else begin
      M_encoder1value_q <= M_encoder1value_d;
      M_encoder2value_q <= M_encoder2value_d;
      M_pwmValue_q <= M_pwmValue_d;
      M_direction1Value_q <= M_direction1Value_d;
      M_direction2Value_q <= M_direction2Value_d;
    end
  end
  
endmodule
